/*!************************************************************************
 \file
 \author(s)
 \par DP email(s):
 \par Course:		CSD2401A
 \date
 \brief

**************************************************************************/

#pragma once
#include "pch.h"
#include "LitterBox/Core/System.h"
#include <initializer_list>
#include "LitterBox/Serialization/Serializer.h"

namespace LB
{
	/*!***********************************************************************
	 \brief

	*************************************************************************/
	class IComponent;
	class GameObject
	{
	public:
		/*!***********************************************************************
		 \brief

		*************************************************************************/
		GameObject();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		GameObject(int ID);

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		~GameObject();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		template <typename T>
		T* GetComponent(std::string name)
		{
			return static_cast<T*>(m_Components[name]);
		}

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		std::unordered_map<std::string, IComponent*> GetComponents();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void AddComponent(std::string name, IComponent* component);
		bool Serialize(Value&, Document::AllocatorType&);
		bool Deserialize(const Value&);
		void StartComponents();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		int GetID() const;

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void SetID(int ID);

	private:
		/*!***********************************************************************
		 \brief

		*************************************************************************/
		int m_ID;

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		std::unordered_map<std::string, IComponent*> m_Components;

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		bool isActive;
	};

	/*!***********************************************************************
	 \brief

	*************************************************************************/
	class GameObjectManager : public ISystem
	{
	public:
		/*!***********************************************************************
		 \brief

		*************************************************************************/
		GameObjectManager();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void Destroy() override;

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		std::vector<GameObject*> GetGameObjects() const;

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void AddGameObject(GameObject* gameObject);

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void DestroyAllGOs();

	private:
		/*!***********************************************************************
		 \brief

		*************************************************************************/
		std::vector<GameObject*> m_GameObjects;
	};

	/*!***********************************************************************
	 \brief

	*************************************************************************/
	extern GameObjectManager* GOMANAGER;
}

