/*!************************************************************************
 \file			Time.h
 \author		Ang Jiawei Jarrett
 \par DP email: a.jiaweijarrett@digipen.edu
 \par Course:	CSD2401A
 \date			19-09-2023
 \brief

**************************************************************************/

#pragma once

#include <chrono>
#include "LitterBox/Core/System.h"
#include "LitterBox/Engine/Events.h"

namespace LB {
	typedef std::chrono::high_resolution_clock::time_point time_point;

	/*!***********************************************************************
	 \brief

	*************************************************************************/
	class Time : public ISystem 
	{
		public:
		/*!***********************************************************************
		 \brief

		*************************************************************************/
		Time(int maxFrameRate = 100, int fixedFrameRate = 50);

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void Initialize() override { SetSystemName("Time System"); }

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		time_point GetTimeStamp();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void LBFrameStart();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void LBFrameEnd();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void SetMaxFrameRate(int fps);

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		int  GetMaxFrameRate();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void SetFixedFrameRate(int fps);

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double GetDeltaTime();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double GetFixedDeltaTime();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double GetUnscaledDeltaTime();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double GetUnscaledFixedDeltaTime();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double GetTimeScale();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void SetTimeScale(double newTimeScale);

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double GetTime();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double GetFrameBudget();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		int GetFrameCount();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		bool ShouldFixedUpdate();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void AccumulateFixedUpdate();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void Sleep(double time);

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void Pause(bool shouldPause);

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void ToggleVSync(bool on);

		/*!***********************************************************************
		 \brief
		 Used to broadcast that a frame has ended

		*************************************************************************/
		Event<> onFrameEnd;

		
		private:
		/*!***********************************************************************
		 \brief
		 Time points to calculate the time taken for each frame

		*************************************************************************/
		time_point m_frameStart, m_frameEnd;

		/*!***********************************************************************
		 \brief
		 Length of time from m_frameStart and m_frameEnd
		*************************************************************************/
		std::chrono::duration<double> m_frameDuration;

		/*!***********************************************************************
		 \brief
		 How much time passed each frame 
		 (m_deltaTime is scaled by timeScale, m_unscaledDeltaTime is not)
		*************************************************************************/
		double m_deltaTime{}, m_unscaledDeltaTime{};
		
		/*!***********************************************************************
		 \brief
		  m_fixedDeltaTime is used to maintain a constant stable loop at a fixed interval
		*************************************************************************/
		double m_fixedDeltaTime, m_unscaledFixedDeltaTime;

		/*!***********************************************************************
		 \brief
		 Time tracks the total amount of time passed since application start
		*************************************************************************/
		double m_time{ 0.0 };

		/*!***********************************************************************
		 \brief
		 Changes deltaTime and fixedDeltaTime, useful to speed up/slow down
		*************************************************************************/
		double m_timeScale{ 1.0 };			

		/*!***********************************************************************
		 \brief
		 Used to return the timescale back to before it was paused
		*************************************************************************/
		double m_timeScaleBeforePause{};	

		/*!***********************************************************************
		 \brief
		 Accumulates time until fixed delta time, used by FixedUpdate for constant loops
		*************************************************************************/
		double m_accumulatedTime{};			

		/*!***********************************************************************
		 \brief
		 The minimum delta time should be (prevents loop from running too fast)
		*************************************************************************/
		double m_minDeltaTime;				

		/*!***********************************************************************
		 \brief
		 The amount of time to wait before next frame (if it is going too fast)
		*************************************************************************/
		double m_frameBudget{};				 

		/*!***********************************************************************
		 \brief
		 The total number of frames rendered since application start
		*************************************************************************/
		long frameCounter{};				

		/*!***********************************************************************
		 \brief
		 The target fps for Update and FixedUpdate
		*************************************************************************/
		int m_maxFrameRate, m_fixedFrameRate;
	};

	/*!***********************************************************************
	\brief
	 A pointer to the system object in the core engine made to be singleton
	*************************************************************************/
	extern Time* TIME;
}
