/*!************************************************************************
 \file				Core.h
 \author(s)
 \par DP email(s):
 \par Course:		CSD2401A
 \date
 \brief

**************************************************************************/

#pragma once

#include "pch.h"
#include "System.h"
#include "LitterBox/Engine/LayerStack.h"

namespace LB 
{
	/*!***********************************************************************
	 \brief

	*************************************************************************/
	class LBEngine
	{
	public:
		/*!***********************************************************************
		 \brief

		*************************************************************************/
		LBEngine();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		~LBEngine();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		bool IsRunning();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void GameLoop();

		/*!***********************************************************************
		 \brief
		 Update all the systems until the game is no longer active.

		*************************************************************************/
		void UpdateFPS(double dt);

		/*!***********************************************************************
		 \brief
		 Destroy all systems in reverse order that they were added.

		*************************************************************************/
		void DestroySystems();

		/*!***********************************************************************
		 \brief
		 Broadcasts a message to all systems.

		*************************************************************************/
		void BroadcastMessage(Message* m);

		/*!***********************************************************************
		 \brief
		 Adds a new system to the game.

		*************************************************************************/
		void AddSystem(ISystem* system);

		/*!***********************************************************************
		 \brief
		 Initializes all systems in the game.

		*************************************************************************/
		void Initialize();

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		void AddLayer(Layer* layer)
		{
			m_LayerStack.AddLayer(layer);
		}

		/*!***********************************************************************
		\brief

		*************************************************************************/
		void RemoveLayer(Layer* layer)
		{
			m_LayerStack.RemoveLayer(layer);
		}

	private:
		LayerStack m_LayerStack;
		/*!***********************************************************************
		 \brief
		 Tracks all the systems the game uses

		*************************************************************************/
		std::vector<ISystem*> Systems;

		/*!***********************************************************************
		 \brief
		 Is the game running (true) or being shut down (false)?

		*************************************************************************/
		bool m_Running;

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double m_FPS{};

		/*!***********************************************************************
		 \brief

		*************************************************************************/
		double m_FPSInterval{ 1.0 };
	};

	/*!***********************************************************************
	\brief
	 A global pointer to the instance of the core

	*************************************************************************/
	extern LBEngine* CORE;
}

